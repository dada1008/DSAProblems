package com.opensource.dada.problems.pattern.subSets;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

/**
 * Problem:
 * Given a word, write a function to generate all of its unique generalized abbreviations.
 *
 * Generalized abbreviation of a word can be generated by replacing
 * each substring of the word by the count of characters in the substring.
 * Take the example of “ab” which has four substrings: “”, “a”, “b”, and “ab”.
 * After replacing these substrings in the actual word by the count of characters
 * we get all the generalized abbreviations: “ab”, “1b”, “a1”, and “2”.
 *
 * Example 1:
 *
 * Input: "BAT"
 * Output: "BAT", "BA1", "B1T", "B2", "1AT", "1A1", "2T", "3"
 * Example 2:
 *
 * Input: "code"
 * Output: "code", "cod1", "co1e", "co2", "c1de", "c1d1", "c2e", "c3", "1ode", "1od1", "1o1e", "1o2",
 * "2de", "2d1", "3e", "4"
 */
public class GeneralizedAbbreviation {

    static class AbbreviatedWord {
        StringBuilder str;
        int start;
        int count;

        public AbbreviatedWord(StringBuilder str, int start, int count) {
            this.str = str;
            this.start = start;
            this.count = count;
        }
    }

    public static void main(String[] args) {

    }

    static List<String> generateGeneralizedAbbreviation(String word) {
        int wordLength = word.length();
        List<String> result = new ArrayList<>();
        Queue<AbbreviatedWord> queue = new LinkedList<>();
        queue.add(new AbbreviatedWord(new StringBuilder(), 0, 0));
        while (!queue.isEmpty()) {
            AbbreviatedWord abbreviatedWord = queue.poll();
            if (abbreviatedWord.start==wordLength) {
                if (abbreviatedWord.count!= 0) {
                    abbreviatedWord.str.append(abbreviatedWord.count);
                }
                result.add(abbreviatedWord.str.toString());
            } else {
                // continue abbreviating by incrementing the current abbreviation count
                queue.add(new AbbreviatedWord(
                        new StringBuilder(abbreviatedWord.str)
                        , abbreviatedWord.start+1
                        , abbreviatedWord.count+1)
                );
                // restart abbreviating, append the count and the current character to the string
                if (abbreviatedWord.start!= 0) {
                    abbreviatedWord.str.append(abbreviatedWord.count);
                }
                queue.add(new AbbreviatedWord(
                        new StringBuilder(abbreviatedWord.str).append(word.charAt(abbreviatedWord.start))
                        , abbreviatedWord.start+1
                        , 0)
                );
            }
        }
        return result;
    }
}
